////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995-2013 Xilinx, Inc.  All rights reserved.
////////////////////////////////////////////////////////////////////////////////
//   ____  ____ 
//  /   /\/   / 
// /___/  \  /    Vendor: Xilinx 
// \   \   \/     Version : 14.7
//  \   \         Application : sch2hdl
//  /   /         Filename : main.vf
// /___/   /\     Timestamp : 12/15/2019 18:41:11
// \   \  /  \ 
//  \___\/\___\ 
//
//Command: sch2hdl -intstyle ise -family spartan6 -verilog R:/digital-assignment/PLSDONTBUG/main.vf -w R:/digital-assignment/PLSDONTBUG/main.sch
//Design Name: main
//Device: spartan6
//Purpose:
//    This verilog netlist is translated from an ECS schematic.It can be 
//    synthesized and simulated, but it should not be modified. 
//
`timescale  100 ps / 10 ps

module AND16_HXILINX_main (O, I0, I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15);
    

   output O;

   input I0;
   input I1;
   input I2;
   input I3;
   input I4;
   input I5;
   input I6;
   input I7;
   input I8;
   input I9;
   input I10;
   input I11;
   input I12;
   input I13;
   input I14;
   input I15;

assign O = I0 && I1 && I2 && I3 && I4 && I5 && I6 && I7 && I8 && I9 && I10 && I11 && I12 && I13 && I14 && I15 ;

endmodule
`timescale  100 ps / 10 ps

module OR6_HXILINX_main (O, I0, I1, I2, I3, I4, I5);
    

   output O;

   input I0;
   input I1;
   input I2;
   input I3;
   input I4;
   input I5;

assign O = (I0 || I1 || I2 || I3 || I4 || I5);

endmodule
`timescale 100 ps / 10 ps

module FJKC_HXILINX_main(Q, C, CLR, J, K);
   
   output             Q;

   input 	      C;	
   input 	      CLR;	
   input              J;
   input              K;
   
   parameter INIT = 1'b0;
   reg                Q = INIT;


   always @(posedge C or posedge CLR)
     begin
	if (CLR)
	  Q <= 1'b0;
	else
        begin
           if(!J)
           begin
              if(K)
              Q <= 1'b0;
           end
           else
           begin
              if(!K)
              Q <= 1'b1;
              else 
              Q <= !Q;
           end
        end
     end
   
endmodule
`timescale 1ns / 1ps

module mux4_MUSER_main(A, 
                       B, 
                       C, 
                       D, 
                       SEL0, 
                       SEL1, 
                       Y);

    input A;
    input B;
    input C;
    input D;
    input SEL0;
    input SEL1;
   output Y;
   
   wire XLXN_13;
   wire XLXN_14;
   wire XLXN_15;
   wire XLXN_16;
   
   AND3B2  XLXI_1 (.I0(SEL1), 
                  .I1(SEL0), 
                  .I2(A), 
                  .O(XLXN_13));
   AND3B1  XLXI_2 (.I0(SEL0), 
                  .I1(SEL1), 
                  .I2(B), 
                  .O(XLXN_14));
   AND3B1  XLXI_3 (.I0(SEL1), 
                  .I1(SEL0), 
                  .I2(C), 
                  .O(XLXN_15));
   AND3  XLXI_4 (.I0(SEL1), 
                .I1(SEL0), 
                .I2(D), 
                .O(XLXN_16));
   OR4  XLXI_5 (.I0(XLXN_16), 
               .I1(XLXN_15), 
               .I2(XLXN_14), 
               .I3(XLXN_13), 
               .O(Y));
endmodule
`timescale 1ns / 1ps

module encoder4to2_MUSER_main(Y0, 
                              Y1, 
                              Y2, 
                              Y3, 
                              X0, 
                              X1);

    input Y0;
    input Y1;
    input Y2;
    input Y3;
   output X0;
   output X1;
   
   
   AND2B2  XLXI_1 (.I0(Y2), 
                  .I1(Y3), 
                  .O(X1));
   AND2B2  XLXI_2 (.I0(Y1), 
                  .I1(Y3), 
                  .O(X0));
endmodule
`timescale 1ns / 1ps

module INCORRECT_MUSER_main(CLK20Mhz, 
                            CLR, 
                            EN, 
                            mode);

    input CLK20Mhz;
    input CLR;
    input EN;
   output [1:0] mode;
   
   wire XLXN_3;
   wire XLXN_11;
   wire XLXN_12;
   
   counterTO4  XLXI_1 (.C(XLXN_3), 
                      .CLR(CLR), 
                      .Q(), 
                      .TC(XLXN_12));
   AND2  XLXI_3 (.I0(XLXN_11), 
                .I1(EN), 
                .O(XLXN_3));
   INV  XLXI_4 (.I(XLXN_12), 
               .O(mode[1]));
   clockdivTO1  XLXI_7 (.CLKin(CLK20Mhz), 
                       .CLKout(XLXN_11));
   VCC  XLXI_8 (.P(mode[0]));
endmodule
`timescale 1ns / 1ps

module UNLOCK_MUSER_main(EN, 
                         TTL, 
                         END, 
                         mode);

    input EN;
    input TTL;
   output END;
   output [1:0] mode;
   
   wire XLXN_3;
   wire XLXN_5;
   wire XLXN_18;
   wire END_DUMMY;
   
   assign END = END_DUMMY;
   AND2  XLXI_2 (.I0(TTL), 
                .I1(EN), 
                .O(XLXN_3));
   FD #( .INIT(1'b0) ) XLXI_3 (.C(XLXN_3), 
              .D(XLXN_5), 
              .Q(XLXN_18));
   INV  XLXI_4 (.I(XLXN_18), 
               .O(XLXN_5));
   AND2B1  XLXI_11 (.I0(TTL), 
                   .I1(XLXN_18), 
                   .O(END_DUMMY));
   INV  XLXI_12 (.I(END_DUMMY), 
                .O(mode[1]));
   INV  XLXI_13 (.I(END_DUMMY), 
                .O(mode[0]));
endmodule
`timescale 1ns / 1ps

module compare16_MUSER_main(D1, 
                            D2, 
                            OUTPUT);

    input [15:0] D1;
    input [15:0] D2;
   output OUTPUT;
   
   wire XLXN_47;
   wire XLXN_48;
   wire XLXN_49;
   wire XLXN_50;
   wire XLXN_51;
   wire XLXN_52;
   wire XLXN_53;
   wire XLXN_54;
   wire XLXN_56;
   wire XLXN_57;
   wire XLXN_58;
   wire XLXN_59;
   wire XLXN_60;
   wire XLXN_61;
   wire XLXN_63;
   wire XLXN_64;
   
   XNOR2  XLXI_69 (.I0(D2[15]), 
                  .I1(D1[15]), 
                  .O(XLXN_56));
   XNOR2  XLXI_70 (.I0(D2[14]), 
                  .I1(D1[14]), 
                  .O(XLXN_57));
   XNOR2  XLXI_71 (.I0(D2[13]), 
                  .I1(D1[13]), 
                  .O(XLXN_58));
   XNOR2  XLXI_72 (.I0(D2[12]), 
                  .I1(D1[12]), 
                  .O(XLXN_59));
   XNOR2  XLXI_73 (.I0(D2[11]), 
                  .I1(D1[11]), 
                  .O(XLXN_64));
   XNOR2  XLXI_74 (.I0(D2[10]), 
                  .I1(D1[10]), 
                  .O(XLXN_63));
   XNOR2  XLXI_75 (.I0(D2[9]), 
                  .I1(D1[9]), 
                  .O(XLXN_61));
   XNOR2  XLXI_76 (.I0(D2[8]), 
                  .I1(D1[8]), 
                  .O(XLXN_60));
   XNOR2  XLXI_77 (.I0(D2[7]), 
                  .I1(D1[7]), 
                  .O(XLXN_47));
   XNOR2  XLXI_78 (.I0(D2[6]), 
                  .I1(D1[6]), 
                  .O(XLXN_48));
   XNOR2  XLXI_79 (.I0(D2[5]), 
                  .I1(D1[5]), 
                  .O(XLXN_49));
   XNOR2  XLXI_80 (.I0(D2[4]), 
                  .I1(D1[4]), 
                  .O(XLXN_50));
   XNOR2  XLXI_81 (.I0(D2[3]), 
                  .I1(D1[3]), 
                  .O(XLXN_54));
   XNOR2  XLXI_82 (.I0(D2[2]), 
                  .I1(D1[2]), 
                  .O(XLXN_53));
   XNOR2  XLXI_83 (.I0(D2[1]), 
                  .I1(D1[1]), 
                  .O(XLXN_52));
   XNOR2  XLXI_84 (.I0(D2[0]), 
                  .I1(D1[0]), 
                  .O(XLXN_51));
   (* HU_SET = "XLXI_85_5" *) 
   AND16_HXILINX_main  XLXI_85 (.I0(XLXN_51), 
                               .I1(XLXN_52), 
                               .I2(XLXN_53), 
                               .I3(XLXN_54), 
                               .I4(XLXN_60), 
                               .I5(XLXN_61), 
                               .I6(XLXN_63), 
                               .I7(XLXN_64), 
                               .I8(XLXN_59), 
                               .I9(XLXN_58), 
                               .I10(XLXN_57), 
                               .I11(XLXN_56), 
                               .I12(XLXN_50), 
                               .I13(XLXN_49), 
                               .I14(XLXN_48), 
                               .I15(XLXN_47), 
                               .O(OUTPUT));
endmodule
`timescale 1ns / 1ps

module memo_MUSER_main(C, 
                       CLR, 
                       EN, 
                       P, 
                       Q);

    input C;
    input CLR;
    input EN;
    input [3:0] P;
   output [3:0] Q;
   
   wire XLXN_28;
   
   FDC  XLXI_1 (.C(XLXN_28), 
               .CLR(CLR), 
               .D(P[3]), 
               .Q(Q[3]));
   FDC  XLXI_2 (.C(XLXN_28), 
               .CLR(CLR), 
               .D(P[2]), 
               .Q(Q[2]));
   FDC  XLXI_3 (.C(XLXN_28), 
               .CLR(CLR), 
               .D(P[1]), 
               .Q(Q[1]));
   FDC  XLXI_4 (.C(XLXN_28), 
               .CLR(CLR), 
               .D(P[0]), 
               .Q(Q[0]));
   AND2  XLXI_6 (.I0(C), 
                .I1(EN), 
                .O(XLXN_28));
endmodule
`timescale 1ns / 1ps

module memo4_MUSER_main(C, 
                        CLR, 
                        P, 
                        SEL, 
                        Q0, 
                        Q1, 
                        Q2, 
                        Q3);

    input C;
    input CLR;
    input [3:0] P;
    input [3:0] SEL;
   output [3:0] Q0;
   output [3:0] Q1;
   output [3:0] Q2;
   output [3:0] Q3;
   
   
   memo_MUSER_main  XLXI_1 (.C(C), 
                           .CLR(CLR), 
                           .EN(SEL[3]), 
                           .P(P[3:0]), 
                           .Q(Q3[3:0]));
   memo_MUSER_main  XLXI_2 (.C(C), 
                           .CLR(CLR), 
                           .EN(SEL[2]), 
                           .P(P[3:0]), 
                           .Q(Q2[3:0]));
   memo_MUSER_main  XLXI_5 (.C(C), 
                           .CLR(CLR), 
                           .EN(SEL[1]), 
                           .P(P[3:0]), 
                           .Q(Q1[3:0]));
   memo_MUSER_main  XLXI_6 (.C(C), 
                           .CLR(CLR), 
                           .EN(SEL[0]), 
                           .P(P[3:0]), 
                           .Q(Q0[3:0]));
endmodule
`timescale 1ns / 1ps

module decoder3to4_MUSER_main(X, 
                              Y);

    input [2:0] X;
   output [3:0] Y;
   
   
   AND3B2  XLXI_27 (.I0(X[1]), 
                   .I1(X[2]), 
                   .I2(X[0]), 
                   .O(Y[3]));
   AND3B2  XLXI_28 (.I0(X[0]), 
                   .I1(X[2]), 
                   .I2(X[1]), 
                   .O(Y[2]));
   AND3B1  XLXI_29 (.I0(X[2]), 
                   .I1(X[1]), 
                   .I2(X[0]), 
                   .O(Y[1]));
   AND3B2  XLXI_30 (.I0(X[0]), 
                   .I1(X[1]), 
                   .I2(X[2]), 
                   .O(Y[0]));
endmodule
`timescale 1ns / 1ps

module ENTERPASS_MUSER_main(CLK20Mhz, 
                            CLR, 
                            CLRmemo, 
                            Data, 
                            Data2, 
                            EN, 
                            isPressed, 
                            mode, 
                            star);

    input CLK20Mhz;
    input CLR;
    input CLRmemo;
    input [3:0] Data;
    input [15:0] Data2;
    input EN;
    input isPressed;
   output [1:0] mode;
   output [2:0] star;
   
   wire [15:0] d;
   wire [3:0] XLXN_2;
   wire XLXN_6;
   wire XLXN_86;
   wire XLXN_88;
   wire XLXN_89;
   wire [2:0] star_DUMMY;
   wire [1:0] mode_DUMMY;
   
   assign mode[1:0] = mode_DUMMY[1:0];
   assign star[2:0] = star_DUMMY[2:0];
   decoder3to4_MUSER_main  XLXI_3 (.X(star_DUMMY[2:0]), 
                                  .Y(XLXN_2[3:0]));
   memo4_MUSER_main  XLXI_4 (.C(CLK20Mhz), 
                            .CLR(CLRmemo), 
                            .P(Data[3:0]), 
                            .SEL(XLXN_2[3:0]), 
                            .Q0(d[3:0]), 
                            .Q1(d[7:4]), 
                            .Q2(d[11:8]), 
                            .Q3(d[15:12]));
   AND2  XLXI_5 (.I0(isPressed), 
                .I1(EN), 
                .O(XLXN_6));
   compare16_MUSER_main  XLXI_22 (.D1(d[15:0]), 
                                 .D2(Data2[15:0]), 
                                 .OUTPUT(XLXN_86));
   counterTO5  XLXI_29 (.C(XLXN_6), 
                       .CLR(CLR), 
                       .Q(star_DUMMY[2:0]), 
                       .TC(XLXN_89));
   AND4B2  XLXI_30 (.I0(Data[0]), 
                   .I1(Data[2]), 
                   .I2(Data[1]), 
                   .I3(Data[3]), 
                   .O(XLXN_88));
   OR2B2  XLXI_36 (.I0(mode_DUMMY[1]), 
                  .I1(XLXN_86), 
                  .O(mode_DUMMY[0]));
   AND2  XLXI_38 (.I0(XLXN_89), 
                 .I1(XLXN_88), 
                 .O(mode_DUMMY[1]));
endmodule
`timescale 1ns / 1ps

module SCAN_MUSER_main(CLK20Mhz, 
                       CLR, 
                       CLRmemo, 
                       Data, 
                       EN, 
                       isPressed, 
                       Dout, 
                       mode);

    input CLK20Mhz;
    input CLR;
    input CLRmemo;
    input [3:0] Data;
    input EN;
    input isPressed;
   output [15:0] Dout;
   output [1:0] mode;
   
   wire XLXN_5;
   wire [2:0] XLXN_6;
   wire [3:0] XLXN_7;
   wire XLXN_8;
   wire XLXN_9;
   
   memo4_MUSER_main  XLXI_1 (.C(CLK20Mhz), 
                            .CLR(CLRmemo), 
                            .P(Data[3:0]), 
                            .SEL(XLXN_7[3:0]), 
                            .Q0(Dout[3:0]), 
                            .Q1(Dout[7:4]), 
                            .Q2(Dout[11:8]), 
                            .Q3(Dout[15:12]));
   AND2  XLXI_2 (.I0(isPressed), 
                .I1(EN), 
                .O(XLXN_5));
   counterTO4  XLXI_4 (.C(XLXN_5), 
                      .CLR(CLR), 
                      .Q(XLXN_6[2:0]), 
                      .TC(XLXN_9));
   decoder3to4_MUSER_main  XLXI_5 (.X(XLXN_6[2:0]), 
                                  .Y(XLXN_7[3:0]));
   BUF  XLXI_9 (.I(XLXN_9), 
               .O(mode[0]));
   GND  XLXI_10 (.G(XLXN_8));
   BUF  XLXI_11 (.I(XLXN_8), 
                .O(mode[1]));
endmodule
`timescale 1ns / 1ps

module modeDecoder_MUSER_main(X, 
                              Y);

    input [1:0] X;
   output [3:0] Y;
   
   wire XLXN_69;
   wire XLXN_74;
   
   AND2B2  XLXI_1 (.I0(XLXN_74), 
                  .I1(XLXN_69), 
                  .O(Y[3]));
   AND2B1  XLXI_2 (.I0(XLXN_69), 
                  .I1(XLXN_74), 
                  .O(Y[2]));
   AND2B1  XLXI_3 (.I0(XLXN_74), 
                  .I1(XLXN_69), 
                  .O(Y[1]));
   AND2  XLXI_4 (.I0(XLXN_74), 
                .I1(XLXN_69), 
                .O(Y[0]));
   FD #( .INIT(1'b0) ) XLXI_36 (.C(X[1]), 
               .D(X[1]), 
               .Q(XLXN_69));
   FD #( .INIT(1'b0) ) XLXI_37 (.C(X[0]), 
               .D(X[0]), 
               .Q(XLXN_74));
endmodule
`timescale 1ns / 1ps

module numbuf_MUSER_main(C, 
                         CLK20Mhz, 
                         pressed, 
                         R, 
                         Col, 
                         Row);

    input [3:0] C;
    input CLK20Mhz;
    input pressed;
    input [3:0] R;
   output [3:0] Col;
   output [3:0] Row;
   
   wire XLXN_32;
   
   FD #( .INIT(1'b0) ) XLXI_1 (.C(XLXN_32), 
              .D(R[0]), 
              .Q(Row[0]));
   FD #( .INIT(1'b0) ) XLXI_9 (.C(XLXN_32), 
              .D(R[1]), 
              .Q(Row[1]));
   FD #( .INIT(1'b0) ) XLXI_17 (.C(XLXN_32), 
               .D(R[3]), 
               .Q(Row[3]));
   FD #( .INIT(1'b0) ) XLXI_18 (.C(XLXN_32), 
               .D(R[2]), 
               .Q(Row[2]));
   FD #( .INIT(1'b0) ) XLXI_47 (.C(XLXN_32), 
               .D(C[0]), 
               .Q(Col[0]));
   FD #( .INIT(1'b0) ) XLXI_48 (.C(XLXN_32), 
               .D(C[1]), 
               .Q(Col[1]));
   FD #( .INIT(1'b0) ) XLXI_49 (.C(XLXN_32), 
               .D(C[2]), 
               .Q(Col[2]));
   FD #( .INIT(1'b0) ) XLXI_50 (.C(XLXN_32), 
               .D(C[3]), 
               .Q(Col[3]));
   AND2  XLXI_52 (.I0(pressed), 
                 .I1(CLK20Mhz), 
                 .O(XLXN_32));
endmodule
`timescale 1ns / 1ps

module numBCD_MUSER_main(Col, 
                         Row, 
                         BCD);

    input [3:0] Col;
    input [3:0] Row;
   output [3:0] BCD;
   
   wire XLXN_54;
   wire XLXN_56;
   wire XLXN_57;
   wire XLXN_58;
   wire XLXN_59;
   wire XLXN_60;
   wire XLXN_61;
   wire XLXN_62;
   wire XLXN_63;
   wire XLXN_64;
   wire XLXN_73;
   wire XLXN_74;
   wire XLXN_75;
   wire XLXN_76;
   wire XLXN_77;
   wire XLXN_78;
   
   AND5B5  XLXI_1 (.I0(Col[2]), 
                  .I1(Col[1]), 
                  .I2(Col[0]), 
                  .I3(Row[1]), 
                  .I4(Row[0]), 
                  .O(XLXN_54));
   AND2B1  XLXI_2 (.I0(Col[1]), 
                  .I1(Row[3]), 
                  .O(XLXN_56));
   AND2B1  XLXI_3 (.I0(Col[0]), 
                  .I1(Row[2]), 
                  .O(XLXN_57));
   AND4B4  XLXI_4 (.I0(Col[2]), 
                  .I1(Col[1]), 
                  .I2(Row[1]), 
                  .I3(Row[0]), 
                  .O(XLXN_58));
   AND4B4  XLXI_5 (.I0(Col[3]), 
                  .I1(Col[1]), 
                  .I2(Row[2]), 
                  .I3(Row[0]), 
                  .O(XLXN_59));
   AND2B1  XLXI_6 (.I0(Col[3]), 
                  .I1(Row[1]), 
                  .O(XLXN_60));
   AND4B4  XLXI_7 (.I0(Col[1]), 
                  .I1(Col[0]), 
                  .I2(Row[3]), 
                  .I3(Row[2]), 
                  .O(XLXN_61));
   AND3B2  XLXI_13 (.I0(Col[3]), 
                   .I1(Col[1]), 
                   .I2(Row[3]), 
                   .O(XLXN_62));
   AND2  XLXI_14 (.I0(Col[0]), 
                 .I1(Row[2]), 
                 .O(XLXN_63));
   AND2B1  XLXI_15 (.I0(Col[0]), 
                   .I1(Row[0]), 
                   .O(XLXN_64));
   AND3B2  XLXI_16 (.I0(Row[0]), 
                   .I1(Row[2]), 
                   .I2(Col[3]), 
                   .O(XLXN_73));
   AND5B4  XLXI_17 (.I0(Row[1]), 
                   .I1(Row[3]), 
                   .I2(Col[1]), 
                   .I3(Col[3]), 
                   .I4(Col[0]), 
                   .O(XLXN_75));
   AND5B4  XLXI_18 (.I0(Row[1]), 
                   .I1(Row[3]), 
                   .I2(Col[1]), 
                   .I3(Col[3]), 
                   .I4(Row[2]), 
                   .O(XLXN_76));
   AND5B4  XLXI_19 (.I0(Row[1]), 
                   .I1(Row[3]), 
                   .I2(Col[1]), 
                   .I3(Col[3]), 
                   .I4(Row[0]), 
                   .O(XLXN_78));
   AND2  XLXI_20 (.I0(Col[1]), 
                 .I1(Row[1]), 
                 .O(XLXN_77));
   AND2B1  XLXI_21 (.I0(Row[1]), 
                   .I1(Col[2]), 
                   .O(XLXN_74));
   OR4  XLXI_110 (.I0(XLXN_54), 
                 .I1(Col[3]), 
                 .I2(XLXN_56), 
                 .I3(XLXN_57), 
                 .O(BCD[3]));
   OR4  XLXI_111 (.I0(XLXN_61), 
                 .I1(XLXN_62), 
                 .I2(XLXN_63), 
                 .I3(XLXN_64), 
                 .O(BCD[1]));
   OR3  XLXI_112 (.I0(XLXN_58), 
                 .I1(XLXN_59), 
                 .I2(XLXN_60), 
                 .O(BCD[2]));
   (* HU_SET = "XLXI_114_6" *) 
   OR6_HXILINX_main  XLXI_114 (.I0(XLXN_73), 
                              .I1(XLXN_74), 
                              .I2(XLXN_75), 
                              .I3(XLXN_76), 
                              .I4(XLXN_77), 
                              .I5(XLXN_78), 
                              .O(BCD[0]));
endmodule
`timescale 1ns / 1ps

module decoder2to4_MUSER_main(c0, 
                              c1, 
                              o0, 
                              o1, 
                              o2, 
                              o3);

    input c0;
    input c1;
   output o0;
   output o1;
   output o2;
   output o3;
   
   wire XLXN_13;
   wire XLXN_14;
   wire XLXN_15;
   wire XLXN_16;
   
   AND2  XLXI_13 (.I0(XLXN_14), 
                 .I1(XLXN_13), 
                 .O(o0));
   AND2  XLXI_14 (.I0(c0), 
                 .I1(XLXN_15), 
                 .O(o1));
   AND2  XLXI_16 (.I0(XLXN_16), 
                 .I1(c1), 
                 .O(o2));
   AND2  XLXI_17 (.I0(c0), 
                 .I1(c1), 
                 .O(o3));
   INV  XLXI_18 (.I(c1), 
                .O(XLXN_13));
   INV  XLXI_19 (.I(c0), 
                .O(XLXN_14));
   INV  XLXI_20 (.I(c1), 
                .O(XLXN_15));
   INV  XLXI_21 (.I(c0), 
                .O(XLXN_16));
endmodule
`timescale 1ns / 1ps

module counter3_MUSER_main(CLK, 
                           CLR, 
                           bit0, 
                           bit1);

    input CLK;
    input CLR;
   output bit0;
   output bit1;
   
   wire XLXN_9;
   wire bit1_DUMMY;
   
   assign bit1 = bit1_DUMMY;
   (* HU_SET = "XLXI_1_7" *) 
   FJKC_HXILINX_main  XLXI_1 (.C(CLK), 
                             .CLR(CLR), 
                             .J(bit1_DUMMY), 
                             .K(bit1_DUMMY), 
                             .Q(bit0));
   (* HU_SET = "XLXI_2_8" *) 
   FJKC_HXILINX_main  XLXI_2 (.C(CLK), 
                             .CLR(CLR), 
                             .J(XLXN_9), 
                             .K(XLXN_9), 
                             .Q(bit1_DUMMY));
   VCC  XLXI_3 (.P(XLXN_9));
endmodule
`timescale 1ns / 1ps

module numpad_MUSER_main(CLK20MHz, 
                         numIN, 
                         C, 
                         isPressed, 
                         R);

    input CLK20MHz;
    input [3:0] numIN;
   output [3:0] C;
   output isPressed;
   output [3:0] R;
   
   wire XLXN_1;
   wire XLXN_2;
   wire XLXN_18;
   wire isPressed_DUMMY;
   
   assign isPressed = isPressed_DUMMY;
   OR4  XLXI_4 (.I0(numIN[3]), 
               .I1(numIN[2]), 
               .I2(numIN[1]), 
               .I3(numIN[0]), 
               .O(isPressed_DUMMY));
   AND2B1  XLXI_5 (.I0(isPressed_DUMMY), 
                  .I1(CLK20MHz), 
                  .O(XLXN_18));
   FD #( .INIT(1'b0) ) XLXI_69 (.C(CLK20MHz), 
               .D(numIN[0]), 
               .Q(C[0]));
   FD #( .INIT(1'b0) ) XLXI_79 (.C(CLK20MHz), 
               .D(numIN[1]), 
               .Q(C[1]));
   FD #( .INIT(1'b0) ) XLXI_80 (.C(CLK20MHz), 
               .D(numIN[3]), 
               .Q(C[3]));
   FD #( .INIT(1'b0) ) XLXI_81 (.C(CLK20MHz), 
               .D(numIN[2]), 
               .Q(C[2]));
   counter3_MUSER_main  XLXI_82 (.CLK(XLXN_18), 
                                .CLR(), 
                                .bit0(XLXN_1), 
                                .bit1(XLXN_2));
   decoder2to4_MUSER_main  XLXI_83 (.c0(XLXN_1), 
                                   .c1(XLXN_2), 
                                   .o0(R[0]), 
                                   .o1(R[1]), 
                                   .o2(R[2]), 
                                   .o3(R[3]));
endmodule
`timescale 1ns / 1ps

module main(arduiCLK, 
            arduiData, 
            NumIN, 
            OSC, 
            arduiStar, 
            bcdebug, 
            modeOut0, 
            modeOut1, 
            NumOUT, 
            p67, 
            p74, 
            p75, 
            p78, 
            p81, 
            p82, 
            p84, 
            s);

    input arduiCLK;
    input [3:0] arduiData;
    input [3:0] NumIN;
    input OSC;
   output [2:0] arduiStar;
   output [3:0] bcdebug;
   output modeOut0;
   output modeOut1;
   output [3:0] NumOUT;
   output p67;
   output p74;
   output p75;
   output p78;
   output p81;
   output p82;
   output p84;
   output [2:0] s;
   
   wire [3:0] EN;
   wire [1:0] L0;
   wire [1:0] L1;
   wire [1:0] L2;
   wire [1:0] L3;
   wire [1:0] m;
   wire [3:0] XLXN_7;
   wire [3:0] XLXN_8;
   wire [3:0] XLXN_12;
   wire XLXN_36;
   wire XLXN_37;
   wire XLXN_39;
   wire XLXN_45;
   wire XLXN_49;
   wire XLXN_204;
   wire XLXN_205;
   wire [15:0] XLXN_232;
   wire p84_DUMMY;
   wire [3:0] bcdebug_DUMMY;
   wire [3:0] NumOUT_DUMMY;
   wire [2:0] arduiStar_DUMMY;
   
   assign arduiStar[2:0] = arduiStar_DUMMY[2:0];
   assign bcdebug[3:0] = bcdebug_DUMMY[3:0];
   assign NumOUT[3:0] = NumOUT_DUMMY[3:0];
   assign p84 = p84_DUMMY;
   numpad_MUSER_main  XLXI_5 (.CLK20MHz(XLXN_49), 
                             .numIN(NumIN[3:0]), 
                             .C(XLXN_7[3:0]), 
                             .isPressed(XLXN_37), 
                             .R(NumOUT_DUMMY[3:0]));
   numbuf_MUSER_main  XLXI_6 (.C(XLXN_7[3:0]), 
                             .CLK20Mhz(OSC), 
                             .pressed(p84_DUMMY), 
                             .R(NumOUT_DUMMY[3:0]), 
                             .Col(XLXN_12[3:0]), 
                             .Row(XLXN_8[3:0]));
   numBCD_MUSER_main  XLXI_7 (.Col(XLXN_12[3:0]), 
                             .Row(XLXN_8[3:0]), 
                             .BCD(bcdebug_DUMMY[3:0]));
   clockdivTO50  XLXI_8 (.CLKin(OSC), 
                        .CLKout(XLXN_36));
   counterTO5  XLXI_9 (.C(XLXN_39), 
                      .CLR(XLXN_45), 
                      .Q(), 
                      .TC(p84_DUMMY));
   AND2  XLXI_37 (.I0(XLXN_37), 
                 .I1(XLXN_36), 
                 .O(XLXN_39));
   INV  XLXI_47 (.I(XLXN_37), 
                .O(XLXN_45));
   AND2B1  XLXI_48 (.I0(p84_DUMMY), 
                   .I1(OSC), 
                   .O(XLXN_49));
   modeDecoder_MUSER_main  XLXI_49 (.X(m[1:0]), 
                                   .Y(EN[3:0]));
   SCAN_MUSER_main  XLXI_65 (.CLK20Mhz(OSC), 
                            .CLR(), 
                            .CLRmemo(), 
                            .Data(arduiData[3:0]), 
                            .EN(EN[3]), 
                            .isPressed(arduiCLK), 
                            .Dout(XLXN_232[15:0]), 
                            .mode(L3[1:0]));
   ENTERPASS_MUSER_main  XLXI_66 (.CLK20Mhz(OSC), 
                                 .CLR(), 
                                 .CLRmemo(), 
                                 .Data(bcdebug_DUMMY[3:0]), 
                                 .Data2(XLXN_232[15:0]), 
                                 .EN(EN[2]), 
                                 .isPressed(p84_DUMMY), 
                                 .mode(L2[1:0]), 
                                 .star(arduiStar_DUMMY[2:0]));
   UNLOCK_MUSER_main  XLXI_67 (.EN(EN[1]), 
                              .TTL(), 
                              .END(), 
                              .mode(L1[1:0]));
   INCORRECT_MUSER_main  XLXI_68 (.CLK20Mhz(OSC), 
                                 .CLR(), 
                                 .EN(EN[0]), 
                                 .mode(L0[1:0]));
   BUF  XLXI_71 (.I(arduiCLK), 
                .O(p82));
   BUF  XLXI_72 (.I(EN[3]), 
                .O(p67));
   BUF  XLXI_73 (.I(EN[2]), 
                .O(p74));
   BUF  XLXI_74 (.I(EN[1]), 
                .O(p75));
   BUF  XLXI_75 (.I(EN[0]), 
                .O(p78));
   encoder4to2_MUSER_main  XLXI_77 (.Y0(EN[0]), 
                                   .Y1(EN[1]), 
                                   .Y2(EN[2]), 
                                   .Y3(EN[3]), 
                                   .X0(XLXN_205), 
                                   .X1(XLXN_204));
   mux4_MUSER_main  XLXI_78 (.A(L3[0]), 
                            .B(L2[0]), 
                            .C(L1[0]), 
                            .D(L0[0]), 
                            .SEL0(XLXN_204), 
                            .SEL1(XLXN_205), 
                            .Y(m[0]));
   mux4_MUSER_main  XLXI_79 (.A(L3[1]), 
                            .B(L2[1]), 
                            .C(L1[1]), 
                            .D(L0[1]), 
                            .SEL0(XLXN_204), 
                            .SEL1(XLXN_205), 
                            .Y(m[1]));
   BUF  XLXI_80 (.I(), 
                .O(p81));
   BUF  XLXI_82_0 (.I(arduiStar_DUMMY[0]), 
                  .O(s[0]));
   BUF  XLXI_82_1 (.I(arduiStar_DUMMY[1]), 
                  .O(s[1]));
   BUF  XLXI_82_2 (.I(arduiStar_DUMMY[2]), 
                  .O(s[2]));
   BUF  XLXI_83 (.I(m[1]), 
                .O(modeOut1));
   BUF  XLXI_84 (.I(m[0]), 
                .O(modeOut0));
endmodule
