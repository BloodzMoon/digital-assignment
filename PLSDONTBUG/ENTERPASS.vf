////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995-2013 Xilinx, Inc.  All rights reserved.
////////////////////////////////////////////////////////////////////////////////
//   ____  ____ 
//  /   /\/   / 
// /___/  \  /    Vendor: Xilinx 
// \   \   \/     Version : 14.7
//  \   \         Application : sch2hdl
//  /   /         Filename : ENTERPASS.vf
// /___/   /\     Timestamp : 12/16/2019 00:00:19
// \   \  /  \ 
//  \___\/\___\ 
//
//Command: sch2hdl -intstyle ise -family spartan6 -verilog R:/digital-assignment/PLSDONTBUG/ENTERPASS.vf -w R:/digital-assignment/PLSDONTBUG/ENTERPASS.sch
//Design Name: ENTERPASS
//Device: spartan6
//Purpose:
//    This verilog netlist is translated from an ECS schematic.It can be 
//    synthesized and simulated, but it should not be modified. 
//
`timescale  100 ps / 10 ps

module AND16_HXILINX_ENTERPASS (O, I0, I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15);
    

   output O;

   input I0;
   input I1;
   input I2;
   input I3;
   input I4;
   input I5;
   input I6;
   input I7;
   input I8;
   input I9;
   input I10;
   input I11;
   input I12;
   input I13;
   input I14;
   input I15;

assign O = I0 && I1 && I2 && I3 && I4 && I5 && I6 && I7 && I8 && I9 && I10 && I11 && I12 && I13 && I14 && I15 ;

endmodule
`timescale 1ns / 1ps

module compare16_MUSER_ENTERPASS(D1, 
                                 D2, 
                                 OUTPUT);

    input [15:0] D1;
    input [15:0] D2;
   output OUTPUT;
   
   wire XLXN_47;
   wire XLXN_48;
   wire XLXN_49;
   wire XLXN_50;
   wire XLXN_51;
   wire XLXN_52;
   wire XLXN_53;
   wire XLXN_54;
   wire XLXN_56;
   wire XLXN_57;
   wire XLXN_58;
   wire XLXN_59;
   wire XLXN_60;
   wire XLXN_61;
   wire XLXN_63;
   wire XLXN_64;
   
   XNOR2  XLXI_69 (.I0(D2[15]), 
                  .I1(D1[15]), 
                  .O(XLXN_56));
   XNOR2  XLXI_70 (.I0(D2[14]), 
                  .I1(D1[14]), 
                  .O(XLXN_57));
   XNOR2  XLXI_71 (.I0(D2[13]), 
                  .I1(D1[13]), 
                  .O(XLXN_58));
   XNOR2  XLXI_72 (.I0(D2[12]), 
                  .I1(D1[12]), 
                  .O(XLXN_59));
   XNOR2  XLXI_73 (.I0(D2[11]), 
                  .I1(D1[11]), 
                  .O(XLXN_64));
   XNOR2  XLXI_74 (.I0(D2[10]), 
                  .I1(D1[10]), 
                  .O(XLXN_63));
   XNOR2  XLXI_75 (.I0(D2[9]), 
                  .I1(D1[9]), 
                  .O(XLXN_61));
   XNOR2  XLXI_76 (.I0(D2[8]), 
                  .I1(D1[8]), 
                  .O(XLXN_60));
   XNOR2  XLXI_77 (.I0(D2[7]), 
                  .I1(D1[7]), 
                  .O(XLXN_47));
   XNOR2  XLXI_78 (.I0(D2[6]), 
                  .I1(D1[6]), 
                  .O(XLXN_48));
   XNOR2  XLXI_79 (.I0(D2[5]), 
                  .I1(D1[5]), 
                  .O(XLXN_49));
   XNOR2  XLXI_80 (.I0(D2[4]), 
                  .I1(D1[4]), 
                  .O(XLXN_50));
   XNOR2  XLXI_81 (.I0(D2[3]), 
                  .I1(D1[3]), 
                  .O(XLXN_54));
   XNOR2  XLXI_82 (.I0(D2[2]), 
                  .I1(D1[2]), 
                  .O(XLXN_53));
   XNOR2  XLXI_83 (.I0(D2[1]), 
                  .I1(D1[1]), 
                  .O(XLXN_52));
   XNOR2  XLXI_84 (.I0(D2[0]), 
                  .I1(D1[0]), 
                  .O(XLXN_51));
   (* HU_SET = "XLXI_85_25" *) 
   AND16_HXILINX_ENTERPASS  XLXI_85 (.I0(XLXN_51), 
                                    .I1(XLXN_52), 
                                    .I2(XLXN_53), 
                                    .I3(XLXN_54), 
                                    .I4(XLXN_60), 
                                    .I5(XLXN_61), 
                                    .I6(XLXN_63), 
                                    .I7(XLXN_64), 
                                    .I8(XLXN_59), 
                                    .I9(XLXN_58), 
                                    .I10(XLXN_57), 
                                    .I11(XLXN_56), 
                                    .I12(XLXN_50), 
                                    .I13(XLXN_49), 
                                    .I14(XLXN_48), 
                                    .I15(XLXN_47), 
                                    .O(OUTPUT));
endmodule
`timescale 1ns / 1ps

module memo_MUSER_ENTERPASS(C, 
                            CLR, 
                            EN, 
                            P, 
                            Q);

    input C;
    input CLR;
    input EN;
    input [3:0] P;
   output [3:0] Q;
   
   wire XLXN_28;
   
   FDC  XLXI_1 (.C(XLXN_28), 
               .CLR(CLR), 
               .D(P[3]), 
               .Q(Q[3]));
   FDC  XLXI_2 (.C(XLXN_28), 
               .CLR(CLR), 
               .D(P[2]), 
               .Q(Q[2]));
   FDC  XLXI_3 (.C(XLXN_28), 
               .CLR(CLR), 
               .D(P[1]), 
               .Q(Q[1]));
   FDC  XLXI_4 (.C(XLXN_28), 
               .CLR(CLR), 
               .D(P[0]), 
               .Q(Q[0]));
   AND2  XLXI_6 (.I0(C), 
                .I1(EN), 
                .O(XLXN_28));
endmodule
`timescale 1ns / 1ps

module memo4_MUSER_ENTERPASS(C, 
                             CLR, 
                             P, 
                             SEL, 
                             Q0, 
                             Q1, 
                             Q2, 
                             Q3);

    input C;
    input CLR;
    input [3:0] P;
    input [3:0] SEL;
   output [3:0] Q0;
   output [3:0] Q1;
   output [3:0] Q2;
   output [3:0] Q3;
   
   
   memo_MUSER_ENTERPASS  XLXI_1 (.C(C), 
                                .CLR(CLR), 
                                .EN(SEL[3]), 
                                .P(P[3:0]), 
                                .Q(Q3[3:0]));
   memo_MUSER_ENTERPASS  XLXI_2 (.C(C), 
                                .CLR(CLR), 
                                .EN(SEL[2]), 
                                .P(P[3:0]), 
                                .Q(Q2[3:0]));
   memo_MUSER_ENTERPASS  XLXI_5 (.C(C), 
                                .CLR(CLR), 
                                .EN(SEL[1]), 
                                .P(P[3:0]), 
                                .Q(Q1[3:0]));
   memo_MUSER_ENTERPASS  XLXI_6 (.C(C), 
                                .CLR(CLR), 
                                .EN(SEL[0]), 
                                .P(P[3:0]), 
                                .Q(Q0[3:0]));
endmodule
`timescale 1ns / 1ps

module decoder3to4_MUSER_ENTERPASS(X, 
                                   Y);

    input [2:0] X;
   output [3:0] Y;
   
   
   AND3B2  XLXI_27 (.I0(X[1]), 
                   .I1(X[2]), 
                   .I2(X[0]), 
                   .O(Y[3]));
   AND3B2  XLXI_28 (.I0(X[0]), 
                   .I1(X[2]), 
                   .I2(X[1]), 
                   .O(Y[2]));
   AND3B1  XLXI_29 (.I0(X[2]), 
                   .I1(X[1]), 
                   .I2(X[0]), 
                   .O(Y[1]));
   AND3B2  XLXI_30 (.I0(X[0]), 
                   .I1(X[1]), 
                   .I2(X[2]), 
                   .O(Y[0]));
endmodule
`timescale 1ns / 1ps

module ENTERPASS(CLK20Mhz, 
                 CLR, 
                 CLRmemo, 
                 Data, 
                 Data2, 
                 EN, 
                 isPressed, 
                 Dd, 
                 mode, 
                 star);

    input CLK20Mhz;
    input CLR;
    input CLRmemo;
    input [3:0] Data;
    input [15:0] Data2;
    input EN;
    input isPressed;
   output [15:0] Dd;
   output [1:0] mode;
   output [2:0] star;
   
   wire [15:0] d;
   wire [3:0] XLXN_2;
   wire XLXN_6;
   wire XLXN_86;
   wire XLXN_88;
   wire XLXN_89;
   wire [2:0] star_DUMMY;
   wire [1:0] mode_DUMMY;
   
   assign mode[1:0] = mode_DUMMY[1:0];
   assign star[2:0] = star_DUMMY[2:0];
   decoder3to4_MUSER_ENTERPASS  XLXI_3 (.X(star_DUMMY[2:0]), 
                                       .Y(XLXN_2[3:0]));
   memo4_MUSER_ENTERPASS  XLXI_4 (.C(CLK20Mhz), 
                                 .CLR(CLRmemo), 
                                 .P(Data[3:0]), 
                                 .SEL(XLXN_2[3:0]), 
                                 .Q0(d[3:0]), 
                                 .Q1(d[7:4]), 
                                 .Q2(d[11:8]), 
                                 .Q3(d[15:12]));
   AND2  XLXI_5 (.I0(isPressed), 
                .I1(EN), 
                .O(XLXN_6));
   compare16_MUSER_ENTERPASS  XLXI_22 (.D1(d[15:0]), 
                                      .D2(Data2[15:0]), 
                                      .OUTPUT(XLXN_86));
   counterTO5  XLXI_29 (.C(XLXN_6), 
                       .CLR(CLR), 
                       .Q(star_DUMMY[2:0]), 
                       .TC(XLXN_89));
   AND4B2  XLXI_30 (.I0(Data[0]), 
                   .I1(Data[2]), 
                   .I2(Data[1]), 
                   .I3(Data[3]), 
                   .O(XLXN_88));
   OR2B2  XLXI_36 (.I0(mode_DUMMY[1]), 
                  .I1(XLXN_86), 
                  .O(mode_DUMMY[0]));
   AND2  XLXI_38 (.I0(XLXN_89), 
                 .I1(XLXN_88), 
                 .O(mode_DUMMY[1]));
   BUF  XLXI_39_0 (.I(d[0]), 
                  .O(Dd[0]));
   BUF  XLXI_39_1 (.I(d[1]), 
                  .O(Dd[1]));
   BUF  XLXI_39_2 (.I(d[2]), 
                  .O(Dd[2]));
   BUF  XLXI_39_3 (.I(d[3]), 
                  .O(Dd[3]));
   BUF  XLXI_39_4 (.I(d[4]), 
                  .O(Dd[4]));
   BUF  XLXI_39_5 (.I(d[5]), 
                  .O(Dd[5]));
   BUF  XLXI_39_6 (.I(d[6]), 
                  .O(Dd[6]));
   BUF  XLXI_39_7 (.I(d[7]), 
                  .O(Dd[7]));
   BUF  XLXI_39_8 (.I(d[8]), 
                  .O(Dd[8]));
   BUF  XLXI_39_9 (.I(d[9]), 
                  .O(Dd[9]));
   BUF  XLXI_39_10 (.I(d[10]), 
                   .O(Dd[10]));
   BUF  XLXI_39_11 (.I(d[11]), 
                   .O(Dd[11]));
   BUF  XLXI_39_12 (.I(d[12]), 
                   .O(Dd[12]));
   BUF  XLXI_39_13 (.I(d[13]), 
                   .O(Dd[13]));
   BUF  XLXI_39_14 (.I(d[14]), 
                   .O(Dd[14]));
   BUF  XLXI_39_15 (.I(d[15]), 
                   .O(Dd[15]));
endmodule
